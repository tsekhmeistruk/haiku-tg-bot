import os
import random
from dotenv import load_dotenv
from openai import OpenAI
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# --- –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó ---
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

if not TELEGRAM_TOKEN:
    raise EnvironmentError("TELEGRAM_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π.")
if not OPENAI_API_KEY:
    raise EnvironmentError("OPENAI_API_KEY –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π.")

client = OpenAI(api_key=OPENAI_API_KEY)

# --- –õ–æ–≥—ñ–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó ---
def read_haiku_examples() -> str:
    try:
        with open("haiku_examples.txt", "r", encoding="utf-8") as file:
            examples = file.read().strip()
            return f"\n\n–ü—Ä–∏–∫–ª–∞–¥–∏ —Ö–∞–π–∫—É:\n{examples}" if examples else ""
    except Exception as e:
        return f"\n\n# (–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø—Ä–∏–∫–ª–∞–¥–∏ —Ö–∞–π–∫—É: {e})"

def ask_openai(prompt: str, max_tokens: int = 200, temperature: float = 0.6) -> str:
    try:
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=max_tokens,
            temperature=temperature
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        return f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó: {e}"

def generate_haiku() -> str:
    examples = read_haiku_examples()
    prompt = f"–°–∫–ª–∞–¥–∏ —Ö–∞–π–∫—É –∑–∞ –ø—Ä–∏–∫–ª–∞–¥–æ–º:{examples}. –ü–µ—Ä–µ–¥–∞—î –Ω–∞—Å—Ç—Ä—ñ–π —Å–∞–º—É—Ä–∞—è —â–æ –ø–æ—á–∏–Ω–∞—î —Å–≤—ñ–π —Ä–∞–Ω–æ–∫ –∑—ñ —Å–∫–ª—è–Ω–∫–æ—é —Å–∞–∫–µ."
    return ask_openai(prompt)

def generate_mood() -> str:
    prompt = (
        "–°–∫–∞–∂–∏ –∫–æ—Ä–æ—Ç–∫—É —Ñ—Ä–∞–∑—É (–æ–¥–Ω–µ –∫–æ—Ä–æ—Ç–∫–µ —Ä–µ—á–µ–Ω–Ω—è), "
        "—è–∫–∞ –ø–µ—Ä–µ–¥–∞—î –Ω–∞—Å—Ç—Ä—ñ–π —Å–∞–º—É—Ä–∞—è. –¶–µ –º–æ–∂–µ –±—É—Ç–∏ —Ç–æ–Ω–∫–∏–π –∂–∞—Ä—Ç, –¥–∏–≤–Ω–∞ –¥—É–º–∫–∞, "
        "–≥–ª–∏–±–æ–∫–∏–π —Å—É–º –∞–±–æ —Ç–≤–µ—Ä–µ–∑–µ —É—Å–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è –≤–µ—Å–µ–ª–æ—ó –Ω–æ—á—ñ. –í—Å–µ –≤ –æ–¥–Ω–æ–º—É —Ä–µ—á–µ–Ω–Ω—ñ."
    )
    return ask_openai(prompt)

def generate_battle_haiku(name1: str, name2: str) -> tuple[str, str]:
    prompt_template = (
        "–°–∫–ª–∞–¥–∏ –∫–æ—Ä–æ—Ç–∫–µ —Ö–∞–π–∫—É –≤—ñ–¥ —ñ–º–µ–Ω—ñ —Å–∞–º—É—Ä–∞—è {name}, "
        "—è–∫–∏–π –±–µ—Ä–µ —É—á–∞—Å—Ç—å —É –¥—É–µ–ª—ñ –∑ —Å–∞–º—É—Ä–∞—î–º {opponent}. "
        "–•–∞–π–∫—É –º–∞—î –±—É—Ç–∏ –∑—É—Ö–≤–∞–ª–∏–º, —ñ—Ä–æ–Ω—ñ—á–Ω–∏–º, –∑ –ø—Ä–µ—Ç–µ–Ω–∑—ñ—î—é –Ω–∞ –ø–µ—Ä–µ–º–æ–≥—É, –∞–ª–µ –±–∞—Ç–ª –∑–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è —Å—É–º—ñ—Å–Ω–∏–º —Ä–æ–∑–ø–∏—Ç—Ç—è–º –∞–ª–∫–æ–≥–æ–ª—å–Ω–∏—Ö –Ω–∞–ø–æ—ó–≤. "
        "–ú–æ–∂–µ –∑–∞—á—ñ–ø–∞—Ç–∏ —Å—É–ø–µ—Ä–Ω–∏–∫–∞, –∞–ª–µ –±–µ–∑ –ø—Ä—è–º–∏—Ö –æ–±—Ä–∞–∑. "
        "–Ü–º‚Äô—è {name} —Ç–∞ —ñ–º‚Äô—è {opponent} –º–∞—é—Ç—å –±—É—Ç–∏ —É —Ç–µ–∫—Å—Ç—ñ."
    )

    haiku1 = ask_openai(prompt_template.format(name=name1, opponent=name2))
    haiku2 = ask_openai(prompt_template.format(name=name2, opponent=name1))
    return haiku1, haiku2

def generate_les_podervianskyi_haiku() -> str:
    try:
        with open("les_podervianskyi_quotes.txt", "r", encoding="utf-8") as file:
            quotes = [line.strip() for line in file.read().split("\n\n") if line.strip()]
        return random.choice(quotes)
    except Exception as e:
        return f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤–∏—Å–ª–æ–≤–∏ –õ–µ—Å—è: {e}"

# --- –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
async def haiku_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    haiku = generate_haiku()
    await update.message.reply_text(haiku)

async def mood_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    mood = generate_mood()
    await update.message.reply_text(mood)

async def battle_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    if len(args) != 2:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂–∏ —ñ–º–µ–Ω–∞ –¥–≤–æ—Ö —Å–∞–º—É—Ä–∞—ó–≤: /battle –Ü–º‚Äô—è1 –Ü–º‚Äô—è2")
        return

    name1, name2 = args[0].capitalize(), args[1].capitalize()
    haiku1, haiku2 = generate_battle_haiku(name1, name2)

    text = (
        f"‚öîÔ∏è *–î—É–µ–ª—å —Å–∞–º—É—Ä–∞—ó–≤!*\n\n"
        f"üë§ *{name1}*:\n_{haiku1}_\n\n"
        f"üë§ *{name2}*:\n_{haiku2}_"
    )
    await update.message.reply_text(text, parse_mode="Markdown")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üëò *Samurai Haiku Bot*\n\n"
        "üìù *–ö–æ–º–∞–Ω–¥–∏:*\n"
        "/haiku ‚Äî —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ö–∞–π–∫—É\n"
        "/mood ‚Äî –Ω–∞—Å—Ç—Ä—ñ–π —Å–∞–º—É—Ä–∞—è\n"
        "/battle –Ü–º‚Äô—è1 –Ü–º‚Äô—è2 ‚Äî –¥—É–µ–ª—å –º—ñ–∂ –¥–≤–æ–º–∞ —Å–∞–º—É—Ä–∞—è–º–∏\n"
        "/ping ‚Äî –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–±–æ—Ç–∏\n"
        "_–°–ª–æ–≤–∞ –∑–∞–∫—ñ–Ω—á—É—é—Ç—å—Å—è, –∞–ª–µ —Ö–∞–π–∫—É ‚Äî –Ω—ñ–∫–æ–ª–∏_"
    )

    keyboard = [
        [InlineKeyboardButton("üçæ –•–∞–π–∫—É", callback_data="haiku")],
        [InlineKeyboardButton("üö¨ –ù–∞—Å—Ç—Ä—ñ–π", callback_data="mood")],
        [InlineKeyboardButton("ü•∑ –î—É–µ–ª—å", callback_data="battle")],
        [InlineKeyboardButton("ü©∏ –õ–µ—Å—å –ü.", callback_data="les")]
    ]
    await update.message.reply_text(help_text, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(keyboard))

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "haiku":
        result = generate_haiku()
        await query.message.reply_text(result)

    elif query.data == "mood":
        result = generate_mood()
        await query.message.reply_text(result)

    elif query.data == "battle":
        context.user_data["awaiting_name1"] = True
        await query.message.reply_text("–í–≤–µ–¥–∏ —ñ–º‚Äô—è –ø–µ—Ä—à–æ–≥–æ —Å–∞–º—É—Ä–∞—è:")
    elif query.data == "les":
        result = generate_les_podervianskyi_haiku()
        await query.message.reply_text(result)

async def user_input_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data = context.user_data
    text = update.message.text.strip().capitalize()

    if user_data.get("awaiting_name1"):
        user_data["name1"] = text
        user_data["awaiting_name1"] = False
        user_data["awaiting_name2"] = True
        await update.message.reply_text("–ê —Ç–µ–ø–µ—Ä —ñ–º‚Äô—è –¥—Ä—É–≥–æ–≥–æ —Å–∞–º—É—Ä–∞—è:")

    elif user_data.get("awaiting_name2"):
        user_data["name2"] = text
        user_data["awaiting_name2"] = False

        name1 = user_data.pop("name1", "–°–∞–º—É—Ä–∞–π1")
        name2 = user_data.pop("name2", "–°–∞–º—É—Ä–∞–π2")
        haiku1, haiku2 = generate_battle_haiku(name1, name2)

        text = (
            f"‚öîÔ∏è *–î—É–µ–ª—å —Å–∞–º—É—Ä–∞—ó–≤!*\n\n"
            f"üë§ *{name1}*:\n_{haiku1}_\n\n"
            f"üë§ *{name2}*:\n_{haiku2}_"
        )
        await update.message.reply_text(text, parse_mode="Markdown")

async def ping_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("Pong! –Ø –ø—Ä–∞—Ü—é—é.")

# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥—É ---
def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("haiku", haiku_command))
    app.add_handler(CommandHandler("mood", mood_command))
    app.add_handler(CommandHandler("battle", battle_command))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("ping", ping_command))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), user_input_handler))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
    app.run_polling()

if __name__ == "__main__":
    try:
        main()
    except Exception as err:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É: {err}")
